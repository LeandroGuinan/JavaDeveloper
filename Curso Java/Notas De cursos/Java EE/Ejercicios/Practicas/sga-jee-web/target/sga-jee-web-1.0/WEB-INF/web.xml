<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
    <session-config>
        <session-timeout>
            30
        </session-timeout>
    </session-config>
    <!-- Configuracion del archivo de bienvenida, son las paginas que se abriran al inicio -->
    <welcome-file-list>
        <welcome-file>faces/index.xhtml</welcome-file>
        <!-- ponemos el tag de faces para que reconozca el comcepto de JSF -->
    </welcome-file-list>
    <!-- agregamos el api de jersey para hacer uso de RS-WS  -->
    <servlet>
        <!-- ya que utilizamos el cliente jersey hacemos referencia a la clase: -->
        <servlet-name>JerseyWebApplication</servlet-name>
        <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>
        <init-param>
            <!-- en este especificamos el parametro a utilizar -->
            <param-name>jersey.config.server.provaider.packages</param-name>
            <!-- en esta es donde configuramos el RS-WS en el paquete de service -->
            <param-value>it.com.gm.sga.servicio</param-value>
        </init-param>
        <!-- indicamos el valor de 1 para que se levante al momento de iniciar la aplicacion -->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <!-- se debe agregar el mismo nombre del servlet: -->
        <servlet-name>JerseyWebApplication</servlet-name>
        <!-- y al usar este url podemos acceder a estos servicios -->
        <url-pattern>/webservice/*</url-pattern>
    </servlet-mapping>
</web-app>
